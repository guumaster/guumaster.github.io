<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>functional-programming on guumaster</title><link>https://guumaster.github.io/tags/functional-programming/</link><description>Recent content in functional-programming on guumaster</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 16 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://guumaster.github.io/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional Programming in JS</title><link>https://guumaster.github.io/talks/functional-programming/</link><pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate><guid>https://guumaster.github.io/talks/functional-programming/</guid><description>This is a talk that I gave on our JS program at Intelygenz on 2016. On
The source is here and the presentation is online here.</description></item><item><title>Functional JavaScript Experiment</title><link>https://guumaster.github.io/projects/functional-programming-experiment/</link><pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate><guid>https://guumaster.github.io/projects/functional-programming-experiment/</guid><description>This was just a functional programming experiment where I&amp;rsquo;ve implemented lots of list functions with only map, reduce and filter.
const slice = (xs, ...args) =&amp;gt; [].slice.apply(xs, args); const concat = (xs, ys) =&amp;gt; [].concat.call(xs, ys); const len = xs =&amp;gt; xs.length; const isEmpty = xs =&amp;gt; !len(xs); const head = xs =&amp;gt; xs[0]; const tail = xs =&amp;gt; slice(xs, 1); const last = xs =&amp;gt; head(slice(xs, -1)); const init = xs =&amp;gt; slice(xs, 0, len(xs) - 1); const take = (m, xs) =&amp;gt; slice(xs, 0, m); const reduce = (fn, acc, xs) =&amp;gt; isEmpty(xs) ?</description></item></channel></rss>